import { Component, OnInit } from '@angular/core';
import { BackendService, ResponseType } from '../../services/backend.service';
import { Response } from '@angular/http';

@Component({
  selector: 'app-converter',
  templateUrl: './converter.component.html',
  styleUrls: ['./converter.component.css']
})
export class ConverterComponent {

  private currencyType: string[];
  private value: ResponseType;
  private initialValue: number;
  private finalValue: number;
  private initialKey: string;
  private finalKey: string;

  // This will hold a text with last error
  private lastError: string;

  constructor(private backend: BackendService) {
    this.backend.getBases().subscribe((res) => {
      this.currencyType = res;
    });
  }

  refresh() {
    this.backend.convert(this.initialKey, this.finalKey, this.initialValue).subscribe((val) => {
      this.value = val;
      this.finalValue = this.value.convertedAmount;

      // If we got to here successfuly, it means there was no error, so we clear the error string
      this.lastError = '';
    }, (response: Response) => {
      // If we got something from backend useful, we display that string, otherwise
      //   we use statusText, which contains human-readable error generated by angular.
      if (response.text() && response.text().length > 0) {
        this.lastError = response.text();
      } else {
        this.lastError = response.statusText;
      }
      // Response status 0 is a special case when either server is unavailable or
      //   user is disconnected from the internet. We do not get any useful information
      //   in response body nor response status text.
      if (response.status === 0) {
        this.lastError = 'Server could not be reached';
      }
    });
  }

}
